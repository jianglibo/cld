buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url 'http://repo.spring.io/release' }
		mavenLocal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.hidetake:gradle-ssh-plugin:1.1.3")
    	classpath 'org.jooq:jooq-codegen:3.7.3'
    	classpath 'com.h2database:h2:1.4.177'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'org.hidetake.ssh'


eclipse {
    classpath {
       downloadSources = true
       downloadJavadoc = false
    }
}

jar {
	baseName = 'web-proxy'
	version =  '0.0.1'
}

test { filter { includeTestsMatching "*Test*" } }

bootRun {
  systemProperties = System.properties
}

repositories {
	mavenCentral()
	maven { url "http://repo.spring.io/release" }
	mavenLocal()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.atteo:evo-inflector:1.2.1')
//    compile('org.springframework.boot:spring-boot-starter-data-rest')

    compile('org.springframework.data:spring-data-commons')
    compile('com.h2database:h2:1.4.191')
	compile('org.apache.httpcomponents:fluent-hc:4.5.2')
    compile('org.apache.httpcomponents:httpmime:4.5.2')
    compile('com.google.guava:guava:19.0')
    compile 'org.jooq:jooq:3.7.3'
    compile 'org.jooq:jooq-meta:3.7.3'

	testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    //:4.0.2.RELEASE
}

ext {
	remoteBase = '/root/boot-application';
}

remotes {
    rmt {
        host = System.properties.host
        user = 'root'
        knownHosts = allowAnyHosts
        identity = file(identityFile)
    }
}

task deploy << {
	String host = System.properties.host

	if (!host) {
		println "please add -Dhost=xxxx"
		System.exit(0)
	}

	String pn = projectDir.toPath().getFileName();

	def remoteDir = remoteBase + "/" + pn

	remotes.rmt.setProperty('host', host)
	ssh.run {
		session(remotes.rmt) {
			execute "rm -rvf ${remoteDir}  >/dev/null; mkdir -p ${remoteDir}"
			put from: "${projectDir}/deployer", into: "$remoteDir"
			put from: "${projectDir}/build/libs/${jar.baseName}-${jar.version}.jar", into: remoteDir
			def cmdStr = "tclsh ${remoteDir}/deployer/run-on-server.tcl --profile=prod deploy"
			println "staring remote execute: $cmdStr"
			execute cmdStr
		}
	}
}

task cg << {

    // Use your favourite XML builder to construct the code generation configuration file
    // ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
        jdbc() {
            driver('org.h2.Driver')
            url('jdbc:h2:file:C:/h2data/webproxy')
            user('sa')
            password('')
        }
        generator() {
            database() {
            }
            generate([:]) {
                pojos true
                daos true
            }
            target() {
                packageName('com.mymock.webproxy.db')
                directory('src/main/java')
            }
        }
    }

    // Run the code generator
    // ----------------------
    org.jooq.util.GenerationTool.main(
        javax.xml.bind.JAXB.unmarshal(
            new StringReader(writer.toString()),
            org.jooq.util.jaxb.Configuration.class
        )
    )
}
task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}
