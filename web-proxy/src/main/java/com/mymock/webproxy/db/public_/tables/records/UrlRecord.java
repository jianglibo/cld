/**
 * This class is generated by jOOQ
 */
package com.mymock.webproxy.db.public_.tables.records;


import com.mymock.webproxy.db.public_.tables.Url;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UrlRecord extends UpdatableRecordImpl<UrlRecord> implements Record4<Integer, String, Timestamp, Integer> {

	private static final long serialVersionUID = -2049380372;

	/**
	 * Setter for <code>PUBLIC.URL.ID</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>PUBLIC.URL.ID</code>.
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.URL.ADDRESS</code>.
	 */
	public void setAddress(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>PUBLIC.URL.ADDRESS</code>.
	 */
	public String getAddress() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>PUBLIC.URL.TS</code>.
	 */
	public void setTs(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>PUBLIC.URL.TS</code>.
	 */
	public Timestamp getTs() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>PUBLIC.URL.NUM</code>.
	 */
	public void setNum(Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>PUBLIC.URL.NUM</code>.
	 */
	public Integer getNum() {
		return (Integer) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, Timestamp, Integer> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, Timestamp, Integer> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Url.URL.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Url.URL.ADDRESS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Url.URL.TS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return Url.URL.NUM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getAddress();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getTs();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getNum();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UrlRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UrlRecord value2(String value) {
		setAddress(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UrlRecord value3(Timestamp value) {
		setTs(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UrlRecord value4(Integer value) {
		setNum(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UrlRecord values(Integer value1, String value2, Timestamp value3, Integer value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached UrlRecord
	 */
	public UrlRecord() {
		super(Url.URL);
	}

	/**
	 * Create a detached, initialised UrlRecord
	 */
	public UrlRecord(Integer id, String address, Timestamp ts, Integer num) {
		super(Url.URL);

		setValue(0, id);
		setValue(1, address);
		setValue(2, ts);
		setValue(3, num);
	}
}
