/**
 * This class is generated by jOOQ
 */
package com.mymock.webproxy.db.public_.tables;


import com.mymock.webproxy.db.public_.Keys;
import com.mymock.webproxy.db.public_.Public;
import com.mymock.webproxy.db.public_.tables.records.HeaderRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Header extends TableImpl<HeaderRecord> {

	private static final long serialVersionUID = -1418263644;

	/**
	 * The reference instance of <code>PUBLIC.HEADER</code>
	 */
	public static final Header HEADER = new Header();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<HeaderRecord> getRecordType() {
		return HeaderRecord.class;
	}

	/**
	 * The column <code>PUBLIC.HEADER.ID</code>.
	 */
	public final TableField<HeaderRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.HEADER.URL_ID</code>.
	 */
	public final TableField<HeaderRecord, Integer> URL_ID = createField("URL_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>PUBLIC.HEADER.HEADER_NAME</code>.
	 */
	public final TableField<HeaderRecord, String> HEADER_NAME = createField("HEADER_NAME", org.jooq.impl.SQLDataType.CHAR.length(30), this, "");

	/**
	 * The column <code>PUBLIC.HEADER.HEADER_VALUE</code>.
	 */
	public final TableField<HeaderRecord, String> HEADER_VALUE = createField("HEADER_VALUE", org.jooq.impl.SQLDataType.CHAR.length(255), this, "");

	/**
	 * Create a <code>PUBLIC.HEADER</code> table reference
	 */
	public Header() {
		this("HEADER", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.HEADER</code> table reference
	 */
	public Header(String alias) {
		this(alias, HEADER);
	}

	private Header(String alias, Table<HeaderRecord> aliased) {
		this(alias, aliased, null);
	}

	private Header(String alias, Table<HeaderRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<HeaderRecord, Integer> getIdentity() {
		return Keys.IDENTITY_HEADER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<HeaderRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_7;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<HeaderRecord>> getKeys() {
		return Arrays.<UniqueKey<HeaderRecord>>asList(Keys.CONSTRAINT_7);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<HeaderRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<HeaderRecord, ?>>asList(Keys.FK_HEADER_URL);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Header as(String alias) {
		return new Header(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Header rename(String name) {
		return new Header(name, null);
	}
}
