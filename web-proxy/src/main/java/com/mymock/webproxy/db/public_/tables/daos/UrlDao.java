/**
 * This class is generated by jOOQ
 */
package com.mymock.webproxy.db.public_.tables.daos;


import com.mymock.webproxy.db.public_.tables.Url;
import com.mymock.webproxy.db.public_.tables.records.UrlRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UrlDao extends DAOImpl<UrlRecord, com.mymock.webproxy.db.public_.tables.pojos.Url, Integer> {

	/**
	 * Create a new UrlDao without any configuration
	 */
	public UrlDao() {
		super(Url.URL, com.mymock.webproxy.db.public_.tables.pojos.Url.class);
	}

	/**
	 * Create a new UrlDao with an attached configuration
	 */
	public UrlDao(Configuration configuration) {
		super(Url.URL, com.mymock.webproxy.db.public_.tables.pojos.Url.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(com.mymock.webproxy.db.public_.tables.pojos.Url object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>ID IN (values)</code>
	 */
	public List<com.mymock.webproxy.db.public_.tables.pojos.Url> fetchById(Integer... values) {
		return fetch(Url.URL.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>ID = value</code>
	 */
	public com.mymock.webproxy.db.public_.tables.pojos.Url fetchOneById(Integer value) {
		return fetchOne(Url.URL.ID, value);
	}

	/**
	 * Fetch records that have <code>ADDRESS IN (values)</code>
	 */
	public List<com.mymock.webproxy.db.public_.tables.pojos.Url> fetchByAddress(String... values) {
		return fetch(Url.URL.ADDRESS, values);
	}

	/**
	 * Fetch a unique record that has <code>ADDRESS = value</code>
	 */
	public com.mymock.webproxy.db.public_.tables.pojos.Url fetchOneByAddress(String value) {
		return fetchOne(Url.URL.ADDRESS, value);
	}

	/**
	 * Fetch records that have <code>TS IN (values)</code>
	 */
	public List<com.mymock.webproxy.db.public_.tables.pojos.Url> fetchByTs(Timestamp... values) {
		return fetch(Url.URL.TS, values);
	}

	/**
	 * Fetch records that have <code>NUM IN (values)</code>
	 */
	public List<com.mymock.webproxy.db.public_.tables.pojos.Url> fetchByNum(Integer... values) {
		return fetch(Url.URL.NUM, values);
	}
}
