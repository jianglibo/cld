/**
 * This class is generated by jOOQ
 */
package com.mymock.webproxy.domain;


import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import com.mymock.webproxy.repository.HasIdField;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wpurl implements Serializable , HasIdField {

	private static final long serialVersionUID = 1757026748;

	private Integer   id;
	private String    address;
	private Timestamp ts;
	private Integer   cnt;
	private byte[]    content;
	private String    diskPath;
	
	/* add manually */
	
	private List<Wpheader> headers;

	public Wpurl() {}

	public Wpurl(Wpurl value) {
		this.id = value.id;
		this.address = value.address;
		this.ts = value.ts;
		this.cnt = value.cnt;
		this.content = value.content;
		this.diskPath = value.diskPath;
	}

	public Wpurl(
		Integer   id,
		String    address,
		Timestamp ts,
		Integer   cnt,
		byte[]    content,
		String    diskPath
	) {
		this.id = id;
		this.address = address;
		this.ts = ts;
		this.cnt = cnt;
		this.content = content;
		this.diskPath = diskPath;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Timestamp getTs() {
		return this.ts;
	}

	public void setTs(Timestamp ts) {
		this.ts = ts;
	}

	public Integer getCnt() {
		return this.cnt;
	}

	public void setCnt(Integer cnt) {
		this.cnt = cnt;
	}

	public byte[] getContent() {
		return this.content;
	}

	public void setContent(byte[] content) {
		this.content = content;
	}

	public String getDiskPath() {
		return this.diskPath;
	}

	public void setDiskPath(String diskPath) {
		this.diskPath = diskPath;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Wpurl (");

		sb.append(id);
		sb.append(", ").append(address);
		sb.append(", ").append(ts);
		sb.append(", ").append(cnt);
		sb.append(", ").append("[binary...]");
		sb.append(", ").append(diskPath);

		sb.append(")");
		return sb.toString();
	}

    public void setHeaders(List<Wpheader> headers) {
       this.headers = headers; 
    }
    
    public List<Wpheader> getHeaders() {
        return this.headers;
    }
}
