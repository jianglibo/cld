import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.taskdefs.FixCRLF
import org.apache.tools.ant.filters.ReplaceTokens

ext { sbv = '1.3.3.RELEASE'; dmp = '0.5.2.RELEASE'; scsp = 'Brixton.M5'; bversion="0.0.1-SNAPSHOT"  }

buildscript {
	ext { sbv = '1.3.3.RELEASE'; dmp = '0.5.2.RELEASE'; scsp = 'Brixton.M5'; bversion="0.0.1-SNAPSHOT" }
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'http://repo.spring.io/libs-release-local' }
		maven {url 'http://repo.spring.io/libs-snapshot-local'}
		maven {url 'http://repo.spring.io/libs-milestone-local'}

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${sbv}")
        classpath "io.spring.gradle:dependency-management-plugin:${dmp}"
		classpath("org.hidetake:gradle-ssh-plugin:1.1.3")
    }
}

apply plugin: 'org.hidetake.ssh'

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

remotes {
    rmt {
        host = System.properties.host
        user = 'root'
        knownHosts = allowAnyHosts
        identity = file(identityFile)
    }
}

ext {
    baseFolder = '/opt'
    rtmpFolder = "$baseFolder/ttmp/${project.name}"
}

task copyTcls << {
	def folder = new File( 'ttmp' )
	if( !folder.exists() ) {
		folder.mkdirs()
	} else {
		folder.listFiles().each {
			delete it
		}
	}
	def scriptsDir = "$projectDir/scripts"
	def runFolder = System.properties['tcl.runFolder']
	copy {
		from("${scriptsDir}/${runFolder}")
		into "ttmp/${runFolder}"
		filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
	}

	copy {
		from("${scriptsDir}/share")
		into "ttmp/share"
		filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
	}

	copy {
		from("${projectDir}/scripts")
		include 'launcher.tcl'
		include 'pkgIndex.tcl'
		into "ttmp"
		filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
	}
}

//task myTask { configure closure }
//task myTask << {}

task mysqlCluster << {
	System.properties['tcl.runFolder'] = 'mysql-cluster'
}

task java << {
	System.properties['tcl.runFolder'] = 'java'
}

task redis << {
	System.properties['tcl.runFolder'] = 'redis'
}

task mongodb << {
	System.properties['tcl.runFolder'] = 'mongodb'
}

def rrr(action) {
	def host = System.properties.host

	if (!host) {
		println "please add -Dhost=xxxx"
		System.exit(0)
	}

	def execFile = "${rtmpFolder}/ttmp/launcher.tcl"
	def args = [:]
	(System.properties.findAll {
		it.key.startsWith 'tcl.'
	}).each {
		args.put(it.key.substring(4), it.value)
	}

	def argstr = args.inject('') {str, item ->
		"${str} -${item.key}=${item.value}"
	}
	String hosts = System.properties.host
	println hosts
	def ips = hosts.split(',')
	println ips
	ips.each {
		remotes.rmt.setProperty('host', it)
		ssh.run {
			session(remotes.rmt) {
					execute "rm -rvf ${rtmpFolder}; mkdir -p ${rtmpFolder}"
					put from: "${projectDir}/ttmp", into: rtmpFolder
					def cmdStr = "chmod -R a+x ${execFile};${execFile} ${argstr} -action=${action}"
					println "staring remote execute: $cmdStr"
					execute cmdStr
				}
			}
		}
}

task install(dependsOn: copyTcls) << {
	rrr('install')
}

task lineReader << {
	File yml = new File('scripts/mysql-cluster/local-profile.yml')
	def ips = []
	yml.eachLine {line ->
		def m = line =~ /.*ip[^0-9]+(\d+\.\d+\.\d+\.\d+)[^0-9]*/
		if (m.matches()) {
			ips << m[0][1]
		}
	}
	ips.unique().each {
		println it
	}
	println remotes.rmt.getClass()
	println remotes.getClass()

	def r = remotes.rmt
	r.setProperty('host', '192.168.33.50')

	ssh.run {
		session(r) {
			execute 'ls -lh'
		}
	}
}

task sp << {
	def m = [a: 1, b:2]
	def r = m.inject('') { str, item ->
		"${str}${item}:"
	}
	println r
}
