/**
 * This class is generated by jOOQ
 */
package com.mymock.db.sys.tables;


import com.mymock.db.sys.Sys;
import com.mymock.db.sys.tables.records.X$statementsWithTempTablesRecord;

import java.math.BigInteger;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$statementsWithTempTables extends TableImpl<X$statementsWithTempTablesRecord> {

	private static final long serialVersionUID = -1027399066;

	/**
	 * The reference instance of <code>sys.x$statements_with_temp_tables</code>
	 */
	public static final X$statementsWithTempTables X$STATEMENTS_WITH_TEMP_TABLES = new X$statementsWithTempTables();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<X$statementsWithTempTablesRecord> getRecordType() {
		return X$statementsWithTempTablesRecord.class;
	}

	/**
	 * The column <code>sys.x$statements_with_temp_tables.query</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, String> QUERY = createField("query", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.db</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, String> DB = createField("db", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.exec_count</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, ULong> EXEC_COUNT = createField("exec_count", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.total_latency</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, ULong> TOTAL_LATENCY = createField("total_latency", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.memory_tmp_tables</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, ULong> MEMORY_TMP_TABLES = createField("memory_tmp_tables", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.disk_tmp_tables</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, ULong> DISK_TMP_TABLES = createField("disk_tmp_tables", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.avg_tmp_tables_per_query</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, BigInteger> AVG_TMP_TABLES_PER_QUERY = createField("avg_tmp_tables_per_query", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.tmp_tables_to_disk_pct</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, BigInteger> TMP_TABLES_TO_DISK_PCT = createField("tmp_tables_to_disk_pct", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(24).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.first_seen</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, Timestamp> FIRST_SEEN = createField("first_seen", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.last_seen</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, Timestamp> LAST_SEEN = createField("last_seen", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.x$statements_with_temp_tables.digest</code>.
	 */
	public final TableField<X$statementsWithTempTablesRecord, String> DIGEST = createField("digest", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

	/**
	 * Create a <code>sys.x$statements_with_temp_tables</code> table reference
	 */
	public X$statementsWithTempTables() {
		this("x$statements_with_temp_tables", null);
	}

	/**
	 * Create an aliased <code>sys.x$statements_with_temp_tables</code> table reference
	 */
	public X$statementsWithTempTables(String alias) {
		this(alias, X$STATEMENTS_WITH_TEMP_TABLES);
	}

	private X$statementsWithTempTables(String alias, Table<X$statementsWithTempTablesRecord> aliased) {
		this(alias, aliased, null);
	}

	private X$statementsWithTempTables(String alias, Table<X$statementsWithTempTablesRecord> aliased, Field<?>[] parameters) {
		super(alias, Sys.SYS, aliased, parameters, "VIEW");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public X$statementsWithTempTables as(String alias) {
		return new X$statementsWithTempTables(alias, this);
	}

	/**
	 * Rename this table
	 */
	public X$statementsWithTempTables rename(String name) {
		return new X$statementsWithTempTables(name, null);
	}
}
