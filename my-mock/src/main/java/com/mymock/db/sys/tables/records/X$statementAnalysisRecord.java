/**
 * This class is generated by jOOQ
 */
package com.mymock.db.sys.tables.records;


import com.mymock.db.sys.tables.X$statementAnalysis;

import java.math.BigInteger;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$statementAnalysisRecord extends TableRecordImpl<X$statementAnalysisRecord> {

	private static final long serialVersionUID = -1586611576;

	/**
	 * Setter for <code>sys.x$statement_analysis.query</code>.
	 */
	public void setQuery(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.query</code>.
	 */
	public String getQuery() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.db</code>.
	 */
	public void setDb(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.db</code>.
	 */
	public String getDb() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.full_scan</code>.
	 */
	public void setFullScan(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.full_scan</code>.
	 */
	public String getFullScan() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.exec_count</code>.
	 */
	public void setExecCount(ULong value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.exec_count</code>.
	 */
	public ULong getExecCount() {
		return (ULong) getValue(3);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.err_count</code>.
	 */
	public void setErrCount(ULong value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.err_count</code>.
	 */
	public ULong getErrCount() {
		return (ULong) getValue(4);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.warn_count</code>.
	 */
	public void setWarnCount(ULong value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.warn_count</code>.
	 */
	public ULong getWarnCount() {
		return (ULong) getValue(5);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.total_latency</code>.
	 */
	public void setTotalLatency(ULong value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.total_latency</code>.
	 */
	public ULong getTotalLatency() {
		return (ULong) getValue(6);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.max_latency</code>.
	 */
	public void setMaxLatency(ULong value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.max_latency</code>.
	 */
	public ULong getMaxLatency() {
		return (ULong) getValue(7);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.avg_latency</code>.
	 */
	public void setAvgLatency(ULong value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.avg_latency</code>.
	 */
	public ULong getAvgLatency() {
		return (ULong) getValue(8);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.lock_latency</code>.
	 */
	public void setLockLatency(ULong value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.lock_latency</code>.
	 */
	public ULong getLockLatency() {
		return (ULong) getValue(9);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.rows_sent</code>.
	 */
	public void setRowsSent(ULong value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.rows_sent</code>.
	 */
	public ULong getRowsSent() {
		return (ULong) getValue(10);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.rows_sent_avg</code>.
	 */
	public void setRowsSentAvg(BigInteger value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.rows_sent_avg</code>.
	 */
	public BigInteger getRowsSentAvg() {
		return (BigInteger) getValue(11);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.rows_examined</code>.
	 */
	public void setRowsExamined(ULong value) {
		setValue(12, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.rows_examined</code>.
	 */
	public ULong getRowsExamined() {
		return (ULong) getValue(12);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.rows_examined_avg</code>.
	 */
	public void setRowsExaminedAvg(BigInteger value) {
		setValue(13, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.rows_examined_avg</code>.
	 */
	public BigInteger getRowsExaminedAvg() {
		return (BigInteger) getValue(13);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.rows_affected</code>.
	 */
	public void setRowsAffected(ULong value) {
		setValue(14, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.rows_affected</code>.
	 */
	public ULong getRowsAffected() {
		return (ULong) getValue(14);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.rows_affected_avg</code>.
	 */
	public void setRowsAffectedAvg(BigInteger value) {
		setValue(15, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.rows_affected_avg</code>.
	 */
	public BigInteger getRowsAffectedAvg() {
		return (BigInteger) getValue(15);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.tmp_tables</code>.
	 */
	public void setTmpTables(ULong value) {
		setValue(16, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.tmp_tables</code>.
	 */
	public ULong getTmpTables() {
		return (ULong) getValue(16);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.tmp_disk_tables</code>.
	 */
	public void setTmpDiskTables(ULong value) {
		setValue(17, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.tmp_disk_tables</code>.
	 */
	public ULong getTmpDiskTables() {
		return (ULong) getValue(17);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.rows_sorted</code>.
	 */
	public void setRowsSorted(ULong value) {
		setValue(18, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.rows_sorted</code>.
	 */
	public ULong getRowsSorted() {
		return (ULong) getValue(18);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.sort_merge_passes</code>.
	 */
	public void setSortMergePasses(ULong value) {
		setValue(19, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.sort_merge_passes</code>.
	 */
	public ULong getSortMergePasses() {
		return (ULong) getValue(19);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.digest</code>.
	 */
	public void setDigest(String value) {
		setValue(20, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.digest</code>.
	 */
	public String getDigest() {
		return (String) getValue(20);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.first_seen</code>.
	 */
	public void setFirstSeen(Timestamp value) {
		setValue(21, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.first_seen</code>.
	 */
	public Timestamp getFirstSeen() {
		return (Timestamp) getValue(21);
	}

	/**
	 * Setter for <code>sys.x$statement_analysis.last_seen</code>.
	 */
	public void setLastSeen(Timestamp value) {
		setValue(22, value);
	}

	/**
	 * Getter for <code>sys.x$statement_analysis.last_seen</code>.
	 */
	public Timestamp getLastSeen() {
		return (Timestamp) getValue(22);
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached X$statementAnalysisRecord
	 */
	public X$statementAnalysisRecord() {
		super(X$statementAnalysis.X$STATEMENT_ANALYSIS);
	}

	/**
	 * Create a detached, initialised X$statementAnalysisRecord
	 */
	public X$statementAnalysisRecord(String query, String db, String fullScan, ULong execCount, ULong errCount, ULong warnCount, ULong totalLatency, ULong maxLatency, ULong avgLatency, ULong lockLatency, ULong rowsSent, BigInteger rowsSentAvg, ULong rowsExamined, BigInteger rowsExaminedAvg, ULong rowsAffected, BigInteger rowsAffectedAvg, ULong tmpTables, ULong tmpDiskTables, ULong rowsSorted, ULong sortMergePasses, String digest, Timestamp firstSeen, Timestamp lastSeen) {
		super(X$statementAnalysis.X$STATEMENT_ANALYSIS);

		setValue(0, query);
		setValue(1, db);
		setValue(2, fullScan);
		setValue(3, execCount);
		setValue(4, errCount);
		setValue(5, warnCount);
		setValue(6, totalLatency);
		setValue(7, maxLatency);
		setValue(8, avgLatency);
		setValue(9, lockLatency);
		setValue(10, rowsSent);
		setValue(11, rowsSentAvg);
		setValue(12, rowsExamined);
		setValue(13, rowsExaminedAvg);
		setValue(14, rowsAffected);
		setValue(15, rowsAffectedAvg);
		setValue(16, tmpTables);
		setValue(17, tmpDiskTables);
		setValue(18, rowsSorted);
		setValue(19, sortMergePasses);
		setValue(20, digest);
		setValue(21, firstSeen);
		setValue(22, lastSeen);
	}
}
