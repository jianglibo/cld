/**
 * This class is generated by jOOQ
 */
package com.mymock.db.sys.routines;


import com.mymock.db.sys.Sys;

import javax.annotation.Generated;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;


/**
 * 
 *  Description
 *  
 *  Saves the current configuration of Performance Schema, 
 *  so that you can alter the setup for debugging purposes, 
 *  but restore it to a previous state.
 *  
 *  Use the companion procedure - ps_setup_reload_saved(), to 
 *  restore the saved config.
 *  
 *  Requires the SUPER privilege for "SET sql_log_bin = 0;".
 *  
 *  Parameters
 *  
 *  None.
 *  
 *  Example
 *  
 *  mysql> CALL sys.ps_setup_save();
 *  Query OK, 0 rows affected (0.08 sec)
 *  
 *  mysql> UPDATE performance_schema.setup_instruments 
 *  ->    SET enabled = 'YES', timed = 'YES';
 *  Query OK, 547 rows affected (0.40 sec)
 *  Rows matched: 784  Changed: 547  Warnings: 0
 *  
 *  / * Run some tests that need more detailed instrumentation here * /
 *  
 *  mysql> CALL sys.ps_setup_reload_saved();
 *  Query OK, 0 rows affected (0.32 sec)
 *  
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsSetupSave extends AbstractRoutine<java.lang.Void> {

	private static final long serialVersionUID = 89853927;

	/**
	 * The parameter <code>sys.ps_setup_save.in_timeout</code>.
	 */
	public static final Parameter<Integer> IN_TIMEOUT = createParameter("in_timeout", org.jooq.impl.SQLDataType.INTEGER, false);

	/**
	 * Create a new routine call instance
	 */
	public PsSetupSave() {
		super("ps_setup_save", Sys.SYS);

		addInParameter(IN_TIMEOUT);
	}

	/**
	 * Set the <code>in_timeout</code> parameter IN value to the routine
	 */
	public void setInTimeout(Integer value) {
		setValue(IN_TIMEOUT, value);
	}
}
