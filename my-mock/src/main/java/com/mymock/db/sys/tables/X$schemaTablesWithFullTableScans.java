/**
 * This class is generated by jOOQ
 */
package com.mymock.db.sys.tables;


import com.mymock.db.sys.Sys;
import com.mymock.db.sys.tables.records.X$schemaTablesWithFullTableScansRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$schemaTablesWithFullTableScans extends TableImpl<X$schemaTablesWithFullTableScansRecord> {

	private static final long serialVersionUID = -2065482821;

	/**
	 * The reference instance of <code>sys.x$schema_tables_with_full_table_scans</code>
	 */
	public static final X$schemaTablesWithFullTableScans X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS = new X$schemaTablesWithFullTableScans();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<X$schemaTablesWithFullTableScansRecord> getRecordType() {
		return X$schemaTablesWithFullTableScansRecord.class;
	}

	/**
	 * The column <code>sys.x$schema_tables_with_full_table_scans.object_schema</code>.
	 */
	public final TableField<X$schemaTablesWithFullTableScansRecord, String> OBJECT_SCHEMA = createField("object_schema", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>sys.x$schema_tables_with_full_table_scans.object_name</code>.
	 */
	public final TableField<X$schemaTablesWithFullTableScansRecord, String> OBJECT_NAME = createField("object_name", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>sys.x$schema_tables_with_full_table_scans.rows_full_scanned</code>.
	 */
	public final TableField<X$schemaTablesWithFullTableScansRecord, ULong> ROWS_FULL_SCANNED = createField("rows_full_scanned", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sys.x$schema_tables_with_full_table_scans.latency</code>.
	 */
	public final TableField<X$schemaTablesWithFullTableScansRecord, ULong> LATENCY = createField("latency", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * Create a <code>sys.x$schema_tables_with_full_table_scans</code> table reference
	 */
	public X$schemaTablesWithFullTableScans() {
		this("x$schema_tables_with_full_table_scans", null);
	}

	/**
	 * Create an aliased <code>sys.x$schema_tables_with_full_table_scans</code> table reference
	 */
	public X$schemaTablesWithFullTableScans(String alias) {
		this(alias, X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS);
	}

	private X$schemaTablesWithFullTableScans(String alias, Table<X$schemaTablesWithFullTableScansRecord> aliased) {
		this(alias, aliased, null);
	}

	private X$schemaTablesWithFullTableScans(String alias, Table<X$schemaTablesWithFullTableScansRecord> aliased, Field<?>[] parameters) {
		super(alias, Sys.SYS, aliased, parameters, "VIEW");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public X$schemaTablesWithFullTableScans as(String alias) {
		return new X$schemaTablesWithFullTableScans(alias, this);
	}

	/**
	 * Rename this table
	 */
	public X$schemaTablesWithFullTableScans rename(String name) {
		return new X$schemaTablesWithFullTableScans(name, null);
	}
}
