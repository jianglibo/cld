/**
 * This class is generated by jOOQ
 */
package com.mymock.db.sys.tables;


import com.mymock.db.sys.Sys;
import com.mymock.db.sys.tables.records.SchemaRedundantIndexesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaRedundantIndexes extends TableImpl<SchemaRedundantIndexesRecord> {

	private static final long serialVersionUID = -983697077;

	/**
	 * The reference instance of <code>sys.schema_redundant_indexes</code>
	 */
	public static final SchemaRedundantIndexes SCHEMA_REDUNDANT_INDEXES = new SchemaRedundantIndexes();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SchemaRedundantIndexesRecord> getRecordType() {
		return SchemaRedundantIndexesRecord.class;
	}

	/**
	 * The column <code>sys.schema_redundant_indexes.table_schema</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, String> TABLE_SCHEMA = createField("table_schema", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.table_name</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.redundant_index_name</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, String> REDUNDANT_INDEX_NAME = createField("redundant_index_name", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.redundant_index_columns</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, String> REDUNDANT_INDEX_COLUMNS = createField("redundant_index_columns", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.redundant_index_non_unique</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, Long> REDUNDANT_INDEX_NON_UNIQUE = createField("redundant_index_non_unique", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.dominant_index_name</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, String> DOMINANT_INDEX_NAME = createField("dominant_index_name", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.dominant_index_columns</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, String> DOMINANT_INDEX_COLUMNS = createField("dominant_index_columns", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.dominant_index_non_unique</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, Long> DOMINANT_INDEX_NON_UNIQUE = createField("dominant_index_non_unique", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.subpart_exists</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, Integer> SUBPART_EXISTS = createField("subpart_exists", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sys.schema_redundant_indexes.sql_drop_index</code>.
	 */
	public final TableField<SchemaRedundantIndexesRecord, String> SQL_DROP_INDEX = createField("sql_drop_index", org.jooq.impl.SQLDataType.VARCHAR.length(223), this, "");

	/**
	 * Create a <code>sys.schema_redundant_indexes</code> table reference
	 */
	public SchemaRedundantIndexes() {
		this("schema_redundant_indexes", null);
	}

	/**
	 * Create an aliased <code>sys.schema_redundant_indexes</code> table reference
	 */
	public SchemaRedundantIndexes(String alias) {
		this(alias, SCHEMA_REDUNDANT_INDEXES);
	}

	private SchemaRedundantIndexes(String alias, Table<SchemaRedundantIndexesRecord> aliased) {
		this(alias, aliased, null);
	}

	private SchemaRedundantIndexes(String alias, Table<SchemaRedundantIndexesRecord> aliased, Field<?>[] parameters) {
		super(alias, Sys.SYS, aliased, parameters, "VIEW");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SchemaRedundantIndexes as(String alias) {
		return new SchemaRedundantIndexes(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SchemaRedundantIndexes rename(String name) {
		return new SchemaRedundantIndexes(name, null);
	}
}
