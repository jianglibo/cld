/**
 * This class is generated by jOOQ
 */
package com.mymock.db.mysql.tables.records;


import com.mymock.db.mysql.tables.SlaveWorkerInfo;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Record2;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Worker Information
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveWorkerInfoRecord extends UpdatableRecordImpl<SlaveWorkerInfoRecord> implements Record13<UInteger, String, ULong, String, ULong, String, ULong, String, ULong, UInteger, UInteger, byte[], String> {

	private static final long serialVersionUID = -1170495137;

	/**
	 * Setter for <code>mysql.slave_worker_info.Id</code>.
	 */
	public void setId(UInteger value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Id</code>.
	 */
	public UInteger getId() {
		return (UInteger) getValue(0);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Relay_log_name</code>.
	 */
	public void setRelayLogName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Relay_log_name</code>.
	 */
	public String getRelayLogName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Relay_log_pos</code>.
	 */
	public void setRelayLogPos(ULong value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Relay_log_pos</code>.
	 */
	public ULong getRelayLogPos() {
		return (ULong) getValue(2);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Master_log_name</code>.
	 */
	public void setMasterLogName(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Master_log_name</code>.
	 */
	public String getMasterLogName() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Master_log_pos</code>.
	 */
	public void setMasterLogPos(ULong value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Master_log_pos</code>.
	 */
	public ULong getMasterLogPos() {
		return (ULong) getValue(4);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Checkpoint_relay_log_name</code>.
	 */
	public void setCheckpointRelayLogName(String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Checkpoint_relay_log_name</code>.
	 */
	public String getCheckpointRelayLogName() {
		return (String) getValue(5);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Checkpoint_relay_log_pos</code>.
	 */
	public void setCheckpointRelayLogPos(ULong value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Checkpoint_relay_log_pos</code>.
	 */
	public ULong getCheckpointRelayLogPos() {
		return (ULong) getValue(6);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Checkpoint_master_log_name</code>.
	 */
	public void setCheckpointMasterLogName(String value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Checkpoint_master_log_name</code>.
	 */
	public String getCheckpointMasterLogName() {
		return (String) getValue(7);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Checkpoint_master_log_pos</code>.
	 */
	public void setCheckpointMasterLogPos(ULong value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Checkpoint_master_log_pos</code>.
	 */
	public ULong getCheckpointMasterLogPos() {
		return (ULong) getValue(8);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Checkpoint_seqno</code>.
	 */
	public void setCheckpointSeqno(UInteger value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Checkpoint_seqno</code>.
	 */
	public UInteger getCheckpointSeqno() {
		return (UInteger) getValue(9);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Checkpoint_group_size</code>.
	 */
	public void setCheckpointGroupSize(UInteger value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Checkpoint_group_size</code>.
	 */
	public UInteger getCheckpointGroupSize() {
		return (UInteger) getValue(10);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Checkpoint_group_bitmap</code>.
	 */
	public void setCheckpointGroupBitmap(byte[] value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Checkpoint_group_bitmap</code>.
	 */
	public byte[] getCheckpointGroupBitmap() {
		return (byte[]) getValue(11);
	}

	/**
	 * Setter for <code>mysql.slave_worker_info.Channel_name</code>. The channel on which the slave is connected to a source. Used in Multisource Replication
	 */
	public void setChannelName(String value) {
		setValue(12, value);
	}

	/**
	 * Getter for <code>mysql.slave_worker_info.Channel_name</code>. The channel on which the slave is connected to a source. Used in Multisource Replication
	 */
	public String getChannelName() {
		return (String) getValue(12);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<String, UInteger> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record13 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row13<UInteger, String, ULong, String, ULong, String, ULong, String, ULong, UInteger, UInteger, byte[], String> fieldsRow() {
		return (Row13) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row13<UInteger, String, ULong, String, ULong, String, ULong, String, ULong, UInteger, UInteger, byte[], String> valuesRow() {
		return (Row13) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UInteger> field1() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.RELAY_LOG_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<ULong> field3() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.RELAY_LOG_POS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.MASTER_LOG_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<ULong> field5() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.MASTER_LOG_POS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field6() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHECKPOINT_RELAY_LOG_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<ULong> field7() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHECKPOINT_RELAY_LOG_POS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field8() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHECKPOINT_MASTER_LOG_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<ULong> field9() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHECKPOINT_MASTER_LOG_POS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UInteger> field10() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHECKPOINT_SEQNO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UInteger> field11() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHECKPOINT_GROUP_SIZE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field12() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHECKPOINT_GROUP_BITMAP;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field13() {
		return SlaveWorkerInfo.SLAVE_WORKER_INFO.CHANNEL_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UInteger value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getRelayLogName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ULong value3() {
		return getRelayLogPos();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getMasterLogName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ULong value5() {
		return getMasterLogPos();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value6() {
		return getCheckpointRelayLogName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ULong value7() {
		return getCheckpointRelayLogPos();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value8() {
		return getCheckpointMasterLogName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ULong value9() {
		return getCheckpointMasterLogPos();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UInteger value10() {
		return getCheckpointSeqno();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UInteger value11() {
		return getCheckpointGroupSize();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value12() {
		return getCheckpointGroupBitmap();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value13() {
		return getChannelName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value1(UInteger value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value2(String value) {
		setRelayLogName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value3(ULong value) {
		setRelayLogPos(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value4(String value) {
		setMasterLogName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value5(ULong value) {
		setMasterLogPos(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value6(String value) {
		setCheckpointRelayLogName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value7(ULong value) {
		setCheckpointRelayLogPos(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value8(String value) {
		setCheckpointMasterLogName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value9(ULong value) {
		setCheckpointMasterLogPos(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value10(UInteger value) {
		setCheckpointSeqno(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value11(UInteger value) {
		setCheckpointGroupSize(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value12(byte[] value) {
		setCheckpointGroupBitmap(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord value13(String value) {
		setChannelName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SlaveWorkerInfoRecord values(UInteger value1, String value2, ULong value3, String value4, ULong value5, String value6, ULong value7, String value8, ULong value9, UInteger value10, UInteger value11, byte[] value12, String value13) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		value9(value9);
		value10(value10);
		value11(value11);
		value12(value12);
		value13(value13);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached SlaveWorkerInfoRecord
	 */
	public SlaveWorkerInfoRecord() {
		super(SlaveWorkerInfo.SLAVE_WORKER_INFO);
	}

	/**
	 * Create a detached, initialised SlaveWorkerInfoRecord
	 */
	public SlaveWorkerInfoRecord(UInteger id, String relayLogName, ULong relayLogPos, String masterLogName, ULong masterLogPos, String checkpointRelayLogName, ULong checkpointRelayLogPos, String checkpointMasterLogName, ULong checkpointMasterLogPos, UInteger checkpointSeqno, UInteger checkpointGroupSize, byte[] checkpointGroupBitmap, String channelName) {
		super(SlaveWorkerInfo.SLAVE_WORKER_INFO);

		setValue(0, id);
		setValue(1, relayLogName);
		setValue(2, relayLogPos);
		setValue(3, masterLogName);
		setValue(4, masterLogPos);
		setValue(5, checkpointRelayLogName);
		setValue(6, checkpointRelayLogPos);
		setValue(7, checkpointMasterLogName);
		setValue(8, checkpointMasterLogPos);
		setValue(9, checkpointSeqno);
		setValue(10, checkpointGroupSize);
		setValue(11, checkpointGroupBitmap);
		setValue(12, channelName);
	}
}
