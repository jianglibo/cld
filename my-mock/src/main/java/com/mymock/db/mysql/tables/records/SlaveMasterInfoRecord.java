/**
 * This class is generated by jOOQ
 */
package com.mymock.db.mysql.tables.records;


import com.mymock.db.mysql.tables.SlaveMasterInfo;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Master Information
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveMasterInfoRecord extends UpdatableRecordImpl<SlaveMasterInfoRecord> {

	private static final long serialVersionUID = -1410311548;

	/**
	 * Setter for <code>mysql.slave_master_info.Number_of_lines</code>. Number of lines in the file.
	 */
	public void setNumberOfLines(UInteger value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Number_of_lines</code>. Number of lines in the file.
	 */
	public UInteger getNumberOfLines() {
		return (UInteger) getValue(0);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Master_log_name</code>. The name of the master binary log currently being read from the master.
	 */
	public void setMasterLogName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Master_log_name</code>. The name of the master binary log currently being read from the master.
	 */
	public String getMasterLogName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Master_log_pos</code>. The master log position of the last read event.
	 */
	public void setMasterLogPos(ULong value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Master_log_pos</code>. The master log position of the last read event.
	 */
	public ULong getMasterLogPos() {
		return (ULong) getValue(2);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Host</code>. The host name of the master.
	 */
	public void setHost(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Host</code>. The host name of the master.
	 */
	public String getHost() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.User_name</code>. The user name used to connect to the master.
	 */
	public void setUserName(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.User_name</code>. The user name used to connect to the master.
	 */
	public String getUserName() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.User_password</code>. The password used to connect to the master.
	 */
	public void setUserPassword(String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.User_password</code>. The password used to connect to the master.
	 */
	public String getUserPassword() {
		return (String) getValue(5);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Port</code>. The network port used to connect to the master.
	 */
	public void setPort(UInteger value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Port</code>. The network port used to connect to the master.
	 */
	public UInteger getPort() {
		return (UInteger) getValue(6);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Connect_retry</code>. The period (in seconds) that the slave will wait before trying to reconnect to the master.
	 */
	public void setConnectRetry(UInteger value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Connect_retry</code>. The period (in seconds) that the slave will wait before trying to reconnect to the master.
	 */
	public UInteger getConnectRetry() {
		return (UInteger) getValue(7);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Enabled_ssl</code>. Indicates whether the server supports SSL connections.
	 */
	public void setEnabledSsl(Byte value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Enabled_ssl</code>. Indicates whether the server supports SSL connections.
	 */
	public Byte getEnabledSsl() {
		return (Byte) getValue(8);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_ca</code>. The file used for the Certificate Authority (CA) certificate.
	 */
	public void setSslCa(String value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_ca</code>. The file used for the Certificate Authority (CA) certificate.
	 */
	public String getSslCa() {
		return (String) getValue(9);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_capath</code>. The path to the Certificate Authority (CA) certificates.
	 */
	public void setSslCapath(String value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_capath</code>. The path to the Certificate Authority (CA) certificates.
	 */
	public String getSslCapath() {
		return (String) getValue(10);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_cert</code>. The name of the SSL certificate file.
	 */
	public void setSslCert(String value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_cert</code>. The name of the SSL certificate file.
	 */
	public String getSslCert() {
		return (String) getValue(11);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_cipher</code>. The name of the cipher in use for the SSL connection.
	 */
	public void setSslCipher(String value) {
		setValue(12, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_cipher</code>. The name of the cipher in use for the SSL connection.
	 */
	public String getSslCipher() {
		return (String) getValue(12);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_key</code>. The name of the SSL key file.
	 */
	public void setSslKey(String value) {
		setValue(13, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_key</code>. The name of the SSL key file.
	 */
	public String getSslKey() {
		return (String) getValue(13);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_verify_server_cert</code>. Whether to verify the server certificate.
	 */
	public void setSslVerifyServerCert(Byte value) {
		setValue(14, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_verify_server_cert</code>. Whether to verify the server certificate.
	 */
	public Byte getSslVerifyServerCert() {
		return (Byte) getValue(14);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Heartbeat</code>.
	 */
	public void setHeartbeat(Double value) {
		setValue(15, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Heartbeat</code>.
	 */
	public Double getHeartbeat() {
		return (Double) getValue(15);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Bind</code>. Displays which interface is employed when connecting to the MySQL server
	 */
	public void setBind(String value) {
		setValue(16, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Bind</code>. Displays which interface is employed when connecting to the MySQL server
	 */
	public String getBind() {
		return (String) getValue(16);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ignored_server_ids</code>. The number of server IDs to be ignored, followed by the actual server IDs
	 */
	public void setIgnoredServerIds(String value) {
		setValue(17, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ignored_server_ids</code>. The number of server IDs to be ignored, followed by the actual server IDs
	 */
	public String getIgnoredServerIds() {
		return (String) getValue(17);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Uuid</code>. The master server uuid.
	 */
	public void setUuid(String value) {
		setValue(18, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Uuid</code>. The master server uuid.
	 */
	public String getUuid() {
		return (String) getValue(18);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Retry_count</code>. Number of reconnect attempts, to the master, before giving up.
	 */
	public void setRetryCount(ULong value) {
		setValue(19, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Retry_count</code>. Number of reconnect attempts, to the master, before giving up.
	 */
	public ULong getRetryCount() {
		return (ULong) getValue(19);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_crl</code>. The file used for the Certificate Revocation List (CRL)
	 */
	public void setSslCrl(String value) {
		setValue(20, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_crl</code>. The file used for the Certificate Revocation List (CRL)
	 */
	public String getSslCrl() {
		return (String) getValue(20);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Ssl_crlpath</code>. The path used for Certificate Revocation List (CRL) files
	 */
	public void setSslCrlpath(String value) {
		setValue(21, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Ssl_crlpath</code>. The path used for Certificate Revocation List (CRL) files
	 */
	public String getSslCrlpath() {
		return (String) getValue(21);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Enabled_auto_position</code>. Indicates whether GTIDs will be used to retrieve events from the master.
	 */
	public void setEnabledAutoPosition(Byte value) {
		setValue(22, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Enabled_auto_position</code>. Indicates whether GTIDs will be used to retrieve events from the master.
	 */
	public Byte getEnabledAutoPosition() {
		return (Byte) getValue(22);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Channel_name</code>. The channel on which the slave is connected to a source. Used in Multisource Replication
	 */
	public void setChannelName(String value) {
		setValue(23, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Channel_name</code>. The channel on which the slave is connected to a source. Used in Multisource Replication
	 */
	public String getChannelName() {
		return (String) getValue(23);
	}

	/**
	 * Setter for <code>mysql.slave_master_info.Tls_version</code>. Tls version
	 */
	public void setTlsVersion(String value) {
		setValue(24, value);
	}

	/**
	 * Getter for <code>mysql.slave_master_info.Tls_version</code>. Tls version
	 */
	public String getTlsVersion() {
		return (String) getValue(24);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached SlaveMasterInfoRecord
	 */
	public SlaveMasterInfoRecord() {
		super(SlaveMasterInfo.SLAVE_MASTER_INFO);
	}

	/**
	 * Create a detached, initialised SlaveMasterInfoRecord
	 */
	public SlaveMasterInfoRecord(UInteger numberOfLines, String masterLogName, ULong masterLogPos, String host, String userName, String userPassword, UInteger port, UInteger connectRetry, Byte enabledSsl, String sslCa, String sslCapath, String sslCert, String sslCipher, String sslKey, Byte sslVerifyServerCert, Double heartbeat, String bind, String ignoredServerIds, String uuid, ULong retryCount, String sslCrl, String sslCrlpath, Byte enabledAutoPosition, String channelName, String tlsVersion) {
		super(SlaveMasterInfo.SLAVE_MASTER_INFO);

		setValue(0, numberOfLines);
		setValue(1, masterLogName);
		setValue(2, masterLogPos);
		setValue(3, host);
		setValue(4, userName);
		setValue(5, userPassword);
		setValue(6, port);
		setValue(7, connectRetry);
		setValue(8, enabledSsl);
		setValue(9, sslCa);
		setValue(10, sslCapath);
		setValue(11, sslCert);
		setValue(12, sslCipher);
		setValue(13, sslKey);
		setValue(14, sslVerifyServerCert);
		setValue(15, heartbeat);
		setValue(16, bind);
		setValue(17, ignoredServerIds);
		setValue(18, uuid);
		setValue(19, retryCount);
		setValue(20, sslCrl);
		setValue(21, sslCrlpath);
		setValue(22, enabledAutoPosition);
		setValue(23, channelName);
		setValue(24, tlsVersion);
	}
}
