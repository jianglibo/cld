import java.nio.file.Paths;

apply plugin: "io.spring.dependency-management"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://repo.spring.io/libs-release-local' }
    maven {url 'http://repo.spring.io/libs-snapshot-local'}
    maven {url 'http://repo.spring.io/libs-milestone-local'}
}

dependencyManagement { imports { mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${scsp}"
    } }

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-eureka-server'
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

bootRun { systemProperties System.properties }

jar {
    baseName = 'eureka-server'
    version = "${bversion}"
}

test {
    filter { includeTestsMatching "*Test*" }
}

remotes {
    fhyun71 {
        host = '10.74.111.71'
        user = 'root'
        knownHosts = allowAnyHosts
        identity = file(identityFile)
    }
    fhyun70 {
        host = '10.74.111.70'
        user = 'root'
        knownHosts = allowAnyHosts
        identity = file(identityFile)
    }
}

def smap = [
    server71: [remote: remotes.fhyun71,remoteFolder:'/opt/eureka-server',jarFile: jar.baseName + "-" + jar.version + ".jar", cmdFile: 'eureka-server.sh', cmd: 'restart server71 eurekaserver.pid'],
    server70: [remote: remotes.fhyun70,remoteFolder:'/opt/eureka-server',jarFile: jar.baseName + "-" + jar.version + ".jar", cmdFile: 'eureka-server.sh', cmd: 'restart server70 eurekaserver.pid']
]



def _runEurekaServer(amap)  {
    def foldname = Paths.get(amap.remoteFolder).getFileName().toString();
    def parentFolder = Paths.get(amap.remoteFolder).getParent().toString().replaceAll("\\\\", "/");
    
    ssh.run {
        session(amap.remote) {
            def result = execute "ls ${parentFolder}"
            if (!result.contains(foldname)) {
                execute "mkdir -p ${amap.remoteFolder}"
                put from: amap.cmdFile, into: amap.remoteFolder
                execute "cd ${amap.remoteFolder}; sed -i 's/\r\$//' ${amap.cmdFile}"
                execute "chmod a+x ${amap.remoteFolder}/${amap.cmdFile}"
            }

            put from: "build/libs/${amap.jarFile}", into: amap.remoteFolder

            executeBackground "cd ${amap.remoteFolder}; ./${amap.cmdFile} ${amap.cmd}"
        }
    }
}

def checkAndReturn(smap) {
    def sn = System.properties.sn;
    if (!sn) {
        println "*** please append -Dsn=eureka-server71,70 ***"
        System.exit(1);
    }
    return smap[sn];
}

task deployserver(dependsOn: build) << {
    def sn = System.properties.sn; 
    if (sn) {
        _runEurekaServer(smap[sn])
    } else {
        _runEurekaServer(smap.server71)
        _runEurekaServer(smap.server70)
    } 
}

task deployserverjust << {
    _runEurekaServer(checkAndReturn(smap))
}