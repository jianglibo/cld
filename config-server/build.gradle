import java.nio.file.Paths;
import groovy.transform.Field;
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.taskdefs.FixCRLF
import org.apache.tools.ant.filters.ReplaceTokens

//https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html

// gradlew :config-server:uploadAndRun -Dprofile=dev
apply plugin: "io.spring.dependency-management"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://repo.spring.io/libs-release-local' }
    maven {url 'http://repo.spring.io/libs-snapshot-local'}
    maven {url 'https://repo.spring.io/libs-milestone'}
    maven {url 'http://repo.spring.io/libs-milestone-local'}
}

dependencyManagement {
    imports { //
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${scsp}" //
    }
}

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-config-server'
    compile 'org.springframework.cloud:spring-cloud-config-monitor'
    compile 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

bootRun { systemProperties System.properties }

jar {
    baseName = 'config-server'
    version = "${bversion}"
}

test {
    filter { //
        includeTestsMatching "*Test*" //
    }
}

remotes {
    dev {
        host = System.properties.host ? System.properties.host : '192.168.33.50' //
        user = 'root' //
        knownHosts = allowAnyHosts //
        identity = file(identityFile) //
    }
}

ext {
    baseFolder = '/opt'
    jarFile = jar.baseName + '-' + jar.version + '.jar'
    runFile = 'boot-run.tcl'
    rtmpFolder = "$baseFolder/ttmp/${project.name}"
    runFileAbs = "${rtmpFolder}/$runFile"
    runningDir = "$baseFolder/${project.name}"
	unitFile = 'config-server.service'
	systemdFolder = '/etc/systemd/system/'
}


task prepareFiles() << {
	String profile = System.properties.profile;

	if (!profile) {
		println "please add -Dprofile=dev etc"
		System.exit(1)
	}

	project.ext.profile = profile

	String runningDirString = runningDir
	String jarFileString = jarFile

    delete 'ttmp'
    mkdir 'ttmp'
    copy {
        from(projectDir) { include '*.tcl' }
        into "ttmp"
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
        filter(ReplaceTokens, tokens: [runningDir: runningDirString, jarFile: jarFileString, profile: profile])
    }
    copy {
        from('build/libs') { include '*.jar' }
        into "ttmp"
    }
}

task uploadAndRun(dependsOn: prepareFiles) << {
    def profile = System.properties.profile;
    profile = profile ? profile : 'dev'
    def pidFile = System.properties.pidFile
    pidFile = pidFile ? pidFile : 'boot.pid'
    ssh.run {
        session(remotes.configServer) {
            execute "rm -rvf ${rtmpFolder}; mkdir -p ${rtmpFolder}"
            put from: "${projectDir}/ttmp/**", into: rtmpFolder
            execute "chmod a+x ${runFileAbs}; ${runFileAbs} $runningDir restart $jarFile $profile $pidFile"
        }
    }
}

task createSystemdUnitFile << {
	String profile = System.properties.profile;

	if (!profile) {
		println "please add -Dprofile=dev etc"
		System.exit(1)
	}

	project.ext.profile = profile

	ssh.run {
		session(remotes[profile]) {
      		put from: "${projectDir}/$unitFile", into: systemdFolder
            execute "chmod 664 ${systemdFolder}${unitFile}; systemctl daemon-reload; systemctl enable $unitFile"
        }
    }
}

task runSystemd(dependsOn: prepareFiles) << {
    ssh.run {
        session(remotes[project.ext.profile]) {
            execute "rm -rvf ${rtmpFolder}; mkdir -p ${rtmpFolder}"
            put from: "${projectDir}/ttmp/**", into: rtmpFolder
            execute "chmod a+x ${rtmpFolder}/*.tcl;systemctl restart $unitFile"
        }
    }
}
