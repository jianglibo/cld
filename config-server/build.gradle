import java.nio.file.Paths;
import groovy.transform.Field;
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.taskdefs.FixCRLF

apply plugin: "io.spring.dependency-management"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://repo.spring.io/libs-release-local' }
    maven {url 'http://repo.spring.io/libs-snapshot-local'}
    maven {url 'http://repo.spring.io/libs-milestone-local'}
}

dependencyManagement {
    imports { //
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${scsp}" //
    }
}

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-config-server'
    compile 'org.springframework.cloud:spring-cloud-config-monitor'
    compile 'org.springframework.cloud:spring-cloud-starter-stream-redis'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

bootRun { systemProperties System.properties }

jar {
    baseName = 'config-server'
    version = "${bversion}"
}

test {
    filter { //
        includeTestsMatching "*Test*" //
    }
}

remotes {
    configServer {
        host = '192.168.33.50'
        user = 'root'
        knownHosts = allowAnyHosts
        identity = file(identityFile)
    }
}

ext {
    baseFolder = '/opt'
    jarFile = jar.baseName + '-' + jar.version + '.jar'
    runFile = 'boot-run.tcl'
    rtmpFolder = "$baseFolder/ttmp/${project.name}"
    runFileAbs = "${rtmpFolder}/$runFile"
    runningDir = "$baseFolder/${project.name}"
}

task startRedis << {
    def execName = 'run-redis.sh';
    def parentFolder = "/opt/redis-3.0.7"
    ssh.run {
        session(remotes.fhyun71) {
            def result = execute "ls ${parentFolder}"
            if (!result.contains(execName)) {
                put from: execName, into: parentFolder
                execute "cd ${parentFolder}; sed -i 's/\r\$//' ${execName}"
                execute "cd ${parentFolder}; chmod a+x ${execName}"
            }
            executeBackground "cd ${parentFolder}; ./${execName} start redis.pid"
        }
    }
}

// build.onlyIf {System.properties.withBuild}

task prepareFiles(/*dependsOn:build*/) << {
    delete 'ttmp'
    mkdir 'ttmp'
    copy {
        from runFile
        into "ttmp"
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
    }
    copy {
        from("build/libs") { include '*.jar' }
        into "ttmp"
    }
}

task uploadAndRun(dependsOn: prepareFiles) << {
    def profile = System.properties.profile;
    def pidFile = System.properties.pidFile
    pidFile = pidFile ? pidFile : 'boot.pid'
    ssh.run {
        session(remotes.configServer) {
            execute "rm -rvf ${rtmpFolder}; mkdir -p ${rtmpFolder}"
            put from: "${projectDir}/ttmp/**", into: rtmpFolder
            execute "chmod a+x ${runFileAbs}; ${runFileAbs} $runningDir restart $jarFile $profile $pidFile"
        }
    }
}
